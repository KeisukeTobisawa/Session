:PROPERTIES:
:ID:       72396578-1195-492f-8aee-f6d952363e1b
:END:
#+title: git lecture part 2
#+date: 2021-11-01 11:13
:DRAWER:
#+LATEX_CLASS: jsarticle
#+LATEX_HEADER: \newcommand{\headauthor}{Yasushi Sakai}
#+LATEX_HEADER: \newcommand{\headtitle}{git lecture part 2}
#+SETUPFILE: ~/.config/org-templates/setup.org
#+FILETAGS: :draft:
#+OPTIONS: title:nil
:END:

* TODO [#A] git lecture part 2
SCHEDULED: <2021-11-18 Thu 7:00>

* introduction

後半である第二回は、思想？編として、why の部分をすこし掘りさげる。

話をわかりやすくする為に、80%のただしさで説明しているものと思っていてください。

** アジェンダ

*** [[id:53b49758-e540-45bf-a140-9c598a0b4640][前半]]

*** 後半

*git と都市・建築にどんな関連性があるのか*

1. github 上での情報公開時の注意
2. OSS 文化とライセンス
3. クレジットの話、デザインの所有権、ライセンス
4. データ構造からつながる分野
5. 設計・デザイン業での使われ方
   - CAD と BIM
6. 建築情報学会での利用
   - 学術委員会での利用

* github 上での情報公開時の注意

使い方は練習次第で、この他にも色々できるのですが、情報の公開時に覚えておいたほう
がいい事があります。

プログラムであれ、図面ファイルであれ、コンセプト文であれ、公開した瞬間から、著作
権が発生します。Github では、何もライセンスを指定しなければ、通常のコピーライト
になります。すなわち、著作者の許可なしに使ったり、公開、配布してはいけないことに
なります。日記ならいいですが、たとえばそれが使えるものだとして、Github という性
質上だれもがコピーしやすい状況にあるのに、著作権がかかっているという不思議な状態
になります。

他人のものを使った場合はこの著作権に違反していないか(オープンソースライセンスが
無いものをコピーしていないか)は注意すれば問題になることはさけやすいですが、それ
以外に以下の状況に注意すべき。

** 研究活動の一環の場合、教官、大学、会社の知財管理ポリシーを確認しておく

公開するかしたとしてもどんなライセンスで公開するかは、超大事な戦略です。研究室の
研究活動の一環でやる場合は、まず指導教官と相談しましょう。共同研究で企業からお金
が入っていたり、あるいは、助成金でも、なんらかの NDA(Non Disclosure Agreement; 機
密保持契約)でやっているかもしれません。

ここまで考えがまわっていなければ、学生や研究員の著作や仕事に対する戦略やポリシー
が無いということになります。

研究室によっては、取りあえず、全てプライベートレポジトリで管理というポリシーも全
然あるだろうし、場所によっては、クラウドの利用を禁止している所もあるでしょう、そ
の場合の管理の方法もあります。まず、github と git の区別もつかずに、危いから使わ
ないのは、頭わるすぎ。


* OSS 文化とライセンス

どんなライセンスがあるか。

** デフォルトは(なにもしなければ) Copyright

** ソフトウェアライセンス

OSS ライセンスといわれているものは、基本的商用可。

https://en.wikipedia.org/wiki/Permissive_software_license

*** Permissive licence (MIT licence, Apache)

*** Protective, Contagious licence (GPL)
そのライセンス下で公開されたプログラムを使う場合は、同じラインセンス下(と指定す
る条約下)で公開しないといけない。 -> 伝染性あるライセンス

コピーレフトともいわれる。

有名なところだと、GPL v3 と Apple (etc, ~bash~)
Apple は GPLv3 のソフトウェアは使えない。

*** Combined licence

Rust のライブラリだと、ダブルライセンスも見かける。

https://github.com/rust-lang/cargo/


** クリエイティブ・コモンズ

https://creativecommons.org/

上の話と似ている。


* データ構造からつながる分野

git のデータ構造として、履歴を保存するために ADG (Acyclic Directed Graph)構造を
もっていて、現コミットが前のコミット ID を憶えていると説明しましたが、前のコミッ
ト ID を替える場合は、現コミットを計算しなおす必要があります。そのまま転用という
わけにはいきませんが、ブロックチェーン技術の従兄弟にあたるような仕組みです。

* デザイン業務での使われ方

プラクティカルな使われ方として、とりあえず、全部 git にいれとけというのが酒井の
とりあえずの対応策です。本来ならば binary ファイル (生のバイトの羅列、テキスト帳
で開く事を想定していないもの) は行ごと比較ができないので、原理主義にたつと
binary は違う保存方法がいいということになりますが、行ごとの差分(コマンド名にちな
んで diff といいます) がみえなくても、いつ誰がなんの為に変更したかという履歴は残
せるので、それだけでも価値があります。text で保存できるようなもの、仕上げ表、設
計アブスト、目次、標準詳細系は行ごとの履歴がみれるとなおいいかもしれません。BIM
でいったら、ファミリ定義ファイルも履歴が積めるといいですね。

** CAD と BIM

- バージョニングが中心的なものは[[https://www.onshape.com/en/][少ない]]

ましては、現状 BIM はやはり、空間情報の記述としてのウェイトが高い。が、プロジェ
クト単位設計(施工)過程での変化、その後の FM 的な使われ方、時間的差分に強いものが
出てきもいいような印象。

- [[http://groups.csail.mit.edu/mac/projects/studentaut/DR%20HK%20Bio.htm][CAD史的]]にも [[https://www.designworldonline.com/cadhistory/][1960 年にすでに]] 'Object Oriented' という単語がでてきている。OOP と
  ルーツをともにしている。

- 1960 年代、A.I. 第 1 の波 (-1974)の最中、最初に MIT にでかいファンディングが政府か
  ら(今の DARPA, 1963)おちる、今の物価換算にすると 22 億円の出資。 -> ポリシーとして、プ
  ロジェクトではなく人にお金を使う。(licklider, Internet, ARPA, GUI の人)-> ハッカー文化の醸成。

- LISP 'atoms'[fn:1], 'S-expression'
  - 'コードとデータを均質に記述し扱うのに便利'
    - flow と structure を同時に扱う。
  - 1986- [[https://en.wikipedia.org/wiki/AutoLISP][AutoLISP]]

# LLVM ターゲットの Lisp とかもっと流行らないかなー

- それが

[fn:1] 今でこそ、OOP とは違ったパラダイムとして、やっぱり LISP からの系統の関数
型言語が再注目されていますが。

* 建築情報学会での使われ方

この話、建築{情報}学会ならではだとおもう。

空間的な思考に強い建築と情報という(通信)流れに強い分野でいうと、履歴情報をあつか
うヴァージョニングこそが、深みを与えるものだと思っている。
