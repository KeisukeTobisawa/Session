:PROPERTIES:
:ID:       53b49758-e540-45bf-a140-9c598a0b4640
:END:
#+title: git lecture part 1
#+date: 2021-10-24 19:02
:DRAWER:
#+LATEX_CLASS: jsarticle
#+LATEX_HEADER: \newcommand{\headauthor}{Yasushi Sakai}
#+LATEX_HEADER: \newcommand{\headtitle}{git lecture part 1}
#+SETUPFILE: ~/.config/org-templates/setup.org
#+FILETAGS: :draft:
#+OPTIONS: title:nil
:END:

* Introduction

建築情報学会で Git を教える事になり、そのために枠を 2 回いただいた。 第一回は実
践編とし、使い方を説明し、第二回は、思想？編として、why の部分をすこし掘りさげる。

** このレクチャーの目的

1. git の基本構造を知る
2. git と github の違いを知る
3. git の基本操作を知る
4. (コードの公開の仕方を知る)

**  対象者

  1. 建築・デザイン系大学生。今までの Session に参加してきて、いよいよデジタルデ
     ザインに関わっていきたいと思っている人

  2. 設計事務所・研究室・研究所運用をしている先生方

  3. 編集者

* git ってなに

git は バージョン管理システム(Version Control System)です。

バージョンを管理するので、あるファイルやフォルダの編集履歴を管理するためのツール
だと思ってください。そのうえで、人と人同士のコラボレーションもサポートします。

* なぜバージョン管理するのか？

  細かい話は次回で話しますが、とりあえず、問答無用できるようになってください。も
  し、理由が欲しければ...

  デジタルデザインやってますと言っていて、VCS を[fn:1]導入していないところは酒井
  だったら偽物だと思うし、基本的なスキルがなかったら、一緒になにか開発したいとは
  思いません。知財管理という見地も含めて議論するのは大歓迎ですが、「しない」人と
  は一緒に仕事したくありません。

と言うのは開発するときのスタート地点に立つためのスキルで、人と一緒に何かやる場合、
git が使えないと相手にしてもらえないと思っていてください。特に github がここまで主
流になって共同作業の作法になりつつあるからです。

デジタルデザインもひとりでコーディング出来るやつが、単独でやる時代は終りにしましょ
う。

git の他にも、色々な VCS がありますが、デファクトとなりつつある、git を今回はやりま
す。

* git の基本構造

使い方を初めに習得する方法もあるが、何をしているのか理解できずに使いつづけること
になりそうなので、内部の構造を先に説明する。

まず、一般的なフォルダとファイルを考えます。

#+begin_src text
project_a/
├─ drawings/
│  ├─ plan.dxf
│  ├─ section.dxf
├─ concept.md
#+end_src

履歴を保存する時、このファイルとフォルダの状態をスナップショット(以下 SS) を *
撮* ります。SS はこの状態をまるごとコピーして圧縮して一時的に保存してると思ってい
てください。

ファイルやフォルダが追加されたり、削除されたり、内容が変化したら、新しい SS をと
ります。

ここで言う SS を ~〇~ だと思ってください。それぞれの SS は、前の SS の場所を記録
していて、後で辿る事が出来るようになっています。

#+begin_src text
〇 <---- 〇 <---- 〇
#+end_src

これだとただの線形な履歴ですが、git は複数の履歴を別々に管理する事が出来ます。そ
の時に、履歴が分岐します。分岐させることをブランチすると言います。

#+begin_src text
〇 <---- 〇 <---- 〇
          \
             <---- 〇
#+end_src

git では、これら複数の履歴を並行して管理したり、それらを合体したりする事ができま
す。この複数の SS を一つにまとめる行為をマージといいます。

* git のデータ構造

今まででてきた名詞を git 内部では以下の単語に翻訳されるわけですが、今回は、馴染
みがある、ファイル、フォルダ、スナップショットで説明を続けます。唯一、コミットは
良く聞くと思うので注意です。

| ファイル         | Blob   | バイトの▼塊                      |
| フォルダ         | Tree   | 空かファイルかフォルダが入ってる |
| スナップショット | Commit | その時の大元のフォルダと、他色々 |

スナップショットは (~Commit~) はまだ馴染みが薄いかもしれませんが、以下の情報を持っ
ています。

- 元フォルダ( ~Tree~ )
- 前のスナップショット (~Commit~)  [fn:1]
- 誰がコミットしたか
- メッセージ (何が何故変ったかあとで確認できるように書いておくメモ)

git の中で、ファイル、フォルダ、スナップショットは全て ~object~ であるとされます。

内部では、この ~object~ 達をすべて一箇所で列挙管理してある、対応表があると思って
いてください。その時の通し番号が ~ID~ [fn:2]といわれ、40 文字の英数で示されるぐ
ちゃぐちゃな文字列です。この 40 文字は省略されて示されることも多いです。この対応
表のおかげで、さっきのスナップショットが持っている情報は実際のフォルダやファイル
の中身ではなく、の それぞれの ~id~ でよくなります。

#+caption: 上のディレクトリ構造を ID 早見表にするとこうなる
| a5c187dd... | ファイル (Blob)           | plan.dxf       |
| bd314705... | ファイル (Blob)           | section.dxf    |
| 77dab483... | フォルダ (Tree)           | drawings       |
| 81134bde... | ファイル (Blob)           | concept.md     |
| 72ada46c... | フォルダ (Tree)           | project_a      |
| 0df8abc6... | スナップショット (commit) | tree: 72ada46c |

ただ、この 40 文字のぐちゃぐちゃな文字列だと、人にやさしくないので、特定の文字列
にあだ名をつけることができます。この文字列とあだ名の対応表も管理しています。

#+caption:
| main     | 0df8abc6 |
| option a | 78ff0ace |
| option b | 56eceab7 |

ファイル (~Blob~ )、フォルダ ( ~Tree~)、 スナップショット ( ~Commit~) とそれをま
とめる、 ~object~ という「もののまとめかた」と、ふたつの早見表で構成されています。

git 実はこれだけなんです。

これが、漠と頭に入ってるだけで、これから実際につかってみたときに、ただ操作の暗記
ではなくて、内部でなにが起っているかを想像しながらすすめることができるとおもいま
す。

[fn:1] これは複数ある可能性があります。何故でしょう？

[fn:2] この ID がどのように決められているのかは、このレクチャーの範囲を越えるの
で、しっかりは説明しませんが、ハッシュ関数というこの ID を生成するアルゴリズム群
があって、その役目を一言でいうと、入力されたデータをもとに必ず決まった長さの文字
列をかえすことです。さらに、同じデータを入力したら、必ず同じ文字列を返すという条
件がつきます。厳密な説明はさておき、これがハッシュ関数の役割りです。git の場合と
くに、 ~sha1~ というハッシュ関数が使われています。

* git と github の違い

操作の方法の前に git と github の違いについて

git はバージョン管理の仕組み（ツール）で、github はそれを使いやすくするためのサー
ビスです。とんかつと和幸の関係です。とんかつという食べ物をサービスとして提供する
和幸です。とんかつとは何か基本的なことがわかっていれば和幸に行っても基本的に大丈
夫なように、git がわかっていれば github の理解は早いですが、どこかで（例えば和幸）
で一度食べないと、とんかつの事をそもそもわからないのも似ています。github の他に
 +とんかつ屋は+ 色々あります:

- github.com
- gitlab.com
- sr.ht

でも今回は、特別 Microsoft に怨念があるわけでもないので、一番使われている github
を使います。

* github + source tree

git はコマンドラインで使うのが一番使いやすいと酒井は *強く* 思っていますが、それ
をやると、時間がないのと、大分敷居が高くなるので、しぶしぶ Source tree というソ
フトをつかいます。

** github の アカウントがなければ早々につくる

** レポジトリを新規作成する
レポジトリは全ての履歴をひっくるめたプロジェクトフォルダだと思っていてください。

** とりあえずなんかファイルを追加する (github 上で)

** クローンする (履歴ごと DL する事です)

** 自分のマシンで編集したり、ファイルを追加したりしてみる

** ステージする

** コミットする

** プッシュする

* 建築情報学会の Org に何か追加してみる。

** プルリクエストの練習

* コードの公開の仕方を知る

使い方は練習次第で、この他にも色々できるのですが、最後に、プログラムの公開時に覚
えておいたほうがいい事があります。

プログラムであれ、図面ファイルであれ、コンセプト文であれ、公開した瞬間から、著作
権が発生します。Github では、何もライセンスを指定しなければ、通常のコピーライトに
なります。すなわち、著作者の許可なしに使ったり、公開、配布してはいけないことにな
ります。日記ならいいですが、たとえばそれが使えるものだとして、github という性質上
だれもがコピーしやすい状況にあるのに、著作権がかかっていています。

他人のものを使った場合はこの著作権に違反していないか(オープンソースライセンスが
無いものをコピーしていないか)は注意すれば問題になることはさけやすいですが、それ
以上に以下の状況に注意すべき

** 研究活動の一環の場合、教官、大学、会社の知財管理ポリシーを確認しておく

公開するか、したとしてもどんなライセンスで公開するかは、超大事な戦略です。研究室
の研究活動の一環でやる場合は、先生と相談しましょう。共同研究で特定企業からお金が
入っていたり、あるいは、助成金でやっているかもしれません。

先に伝えたとおり、ここまで考えがまわっていなければ、学生や研究員の著作物に対する
戦略やポリシーが無いので、研究よりも教育が目的の研究室になります。

研究室によっては、取りあえず、全てプライベートレポジトリで管理というポリシーもあ
るだろうし、場所によっては、クラウドの利用を禁止している所もあるでしょう、その場
合の管理の方法もあります。まず、github と git の区別もつかずに、危いから使わない
のは、頭わるすぎ。
