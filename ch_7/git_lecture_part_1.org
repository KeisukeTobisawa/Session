:PROPERTIES:
:ID:       53b49758-e540-45bf-a140-9c598a0b4640
:END:
#+title: git lecture part 1
#+date: 2021-10-24 19:02
:DRAWER:
#+LATEX_CLASS: jsarticle
#+LATEX_HEADER: \newcommand{\headauthor}{Yasushi Sakai}
#+LATEX_HEADER: \newcommand{\headtitle}{git lecture part 1}
#+SETUPFILE: ~/.config/org-templates/setup.org
#+FILETAGS: :draft:
#+OPTIONS: title:nil
:END:

* introduction

建築情報学会で git を教える事になり、そのために枠を 2 回いただいた。 第一回は実
践編とし、使い方を説明し、第二回は、思想？編として、why の部分をすこし掘りさげる。

あとで、少しだけ github 使います。[[https://github.com/][github]] のアカウントがあるといいです。

** アジェンダ
*** 前半

*テクニカルな事を中心に git の紹介*

1. vcs(バージョン管理システム)とは
2. git の基本構造を知る
3. github の基本操作を知る

*** 後半

*git と都市・建築にどんな関連性があるのか*

(まだ仮です、杉原さんとの話にまかせてもぜんぜん良い)

1. 設計・デザイン業での使われ方
2. データ構造からつながる分野
3. bim 批評
4. クレジットの話、デザインの所有権、ライセンス
5. oss 文化とライセンス

* VCS とは

git は バージョン管理システム(Version Control System)です。

バージョンを管理するので、あるファイルやフォルダの編集履歴を管理するためのツール
だと思ってください。そのうえで、人と人同士のコラボレーションもサポートします。

** なぜバージョン管理するのか？

 細かい話は次回で話しますが、とりあえず、問答無用できるようになってください。も
 し、理由が欲しければ...

 デジタルデザインやってますと言っていて、VCS を導入していないところは酒井だった
 ら偽物だと思うし、一緒になにか開発したいとは思いません。知財管理という見地も含
 めて議論するのは大歓迎ですが、「しない」ところ、人は論外です。

 と言うのは開発するときのスタート地点に立つためのスキルで、人と一緒に何かやる場合、
 git が使えないと相手にしてもらえません。特に git(hub) がここまで主流になって共同
 作業の作法になりつつあるります。

 デジタルデザインもひとりでコーディング出来るやつが、単独でやる時代は終りにしましょ
 う。git の他にも、色々な VCS がありますが、デファクトとなりつつある、git を今回
 はやります。

 という、ソフトウェアエンジニアリングの都合もありますが、普通に設計やデザイン業務に
 つかえると思っています。

 - 仕上げ表
 - 特記
 - 標準詳細
 - 概要

 binary ファイルも気にしないというのであれば、そのまま Illustrator や図面ファイルを
 保存して、殆ど Dropbox のように使っている例もみたことあります。(むしろこっちのほう
 がとっつきやすいかも?)
 
 この辺の話の議論は後半でします。

* git の基本構造

** 簡単な例とそのモデル

使い方を初めに習得する方法もあるが、何をしているのか理解できずに使いつづけること
になりそうなので、内部の構造を先に説明する。

まず、一般的なフォルダとファイルを考えます。

#+begin_src text
project_a/
├─ drawings/
│  ├─ plan.dxf
│  ├─ section.dxf
├─ concept.md
#+end_src

履歴を保存する時、このファイルとフォルダの状態をスナップショット(以下 SS) を *
撮* ります。SS はこの状態をまるごとコピーして圧縮して一時的に保存してると思ってい
てください。

ファイルやフォルダが追加されたり、削除されたり、内容が変化したら、新しい SS をと
ります。

ここで言う SS を ~〇~ だと思ってください。それぞれの SS は、前の SS の場所を記録
していて、後で辿る事が出来るようになっています。

#+attr_org: :width 600px
[[file:images/simple_history.png]]

これだとただの線形な履歴ですが、git は複数の履歴を別々に管理する事が出来ます。そ
の時に、履歴が分岐します。分岐させることをブランチすると言います。

#+attr_org: :width 600px
[[file:images/branching_merging.png]]

git では、これら複数の履歴を並行して管理したり、それらを合体したりする事ができま
す。この複数の SS を一つにまとめる行為をマージといいます。

** git のデータ構造

今まででてきた名詞を git 内部では以下の単語に翻訳されるわけですが、今回は、馴染
みがある、ファイル、フォルダ、スナップショットで説明を続けます。唯一、コミットは
良く聞くと思うので注意です。

| ファイル         | Blob   | バイトの塊                       |
| フォルダ         | Tree   | 空かファイルかフォルダが入ってる |
| スナップショット | Commit | その時の大元のフォルダと、他色々 |

#+attr_org: :width 600px
[[file:images/data_elements.png]]

スナップショットは (~Commit~) はまだ馴染みが薄いかもしれませんが、以下の情報を持っ
ています。

- 元フォルダ( ~Tree~ )
- 前のスナップショット (~Commit~)  [fn:1]
- 誰がコミットしたか
- メッセージ (何が何故変ったかあとで確認できるように書いておくメモ)

git の中で、ファイル、フォルダ、スナップショットは全て ~object~ であるとされます。

内部では、この ~object~ 達をすべて一箇所で列挙管理してある、対応表があると思って
いてください。その時の通し番号が ~ID~ [fn:2]といわれ、40 文字の英数で示されるぐ
ちゃぐちゃな文字列です。この 40 文字は省略されて示されることも多いです。この対応
表のおかげで、さっきのスナップショットが持っている情報は実際のフォルダやファイル
の中身ではなく、の それぞれの ~id~ でよくなります。

#+caption: 上のディレクトリ構造を ID 早見表にするとこうなる
| a5c187dd... | ファイル (Blob)           | plan.dxf       |
| bd314705... | ファイル (Blob)           | section.dxf    |
| 77dab483... | フォルダ (Tree)           | drawings       |
| 81134bde... | ファイル (Blob)           | concept.md     |
| 72ada46c... | フォルダ (Tree)           | project_a      |
| 0df8abc6... | スナップショット (commit) | tree: 72ada46c |

ただ、この 40 文字のぐちゃぐちゃな文字列だと、人にやさしくないので、特定の文字列
にあだ名をつけることができます。この文字列とあだ名の対応表も管理しています。

#+caption:スナップショットにラベルが貼られている。
| main     | 0df8abc6 |
| option a | 78ff0ace |
| option b | 56eceab7 |

ファイル (~Blob~ )、フォルダ ( ~Tree~)、 スナップショット ( ~Commit~) とそれをま
とめる、 ~object~ という「もののまとめかた」と、ふたつの早見表で構成されています。

git 実はこれだけなんです。

これが、漠と頭に入ってるだけで、これから実際につかってみたときに、ただ操作の暗記
ではなくて、内部でなにが起っているかを想像しながらすすめることができるとおもいま
す。

#+caption: このコマンドは覚える必要ありません!
#+begin_src bash
git cat-file -p <ID>
#+end_src

[fn:1] これは複数ある可能性があります。何故でしょう？

[fn:2] この ID がどのように決められているのかは、このレクチャーの範囲を越えるの
で、しっかりは説明しませんが、ハッシュ関数というこの ID を生成するアルゴリズム群
があって、その役目を一言でいうと、入力されたデータをもとに必ず決まった長さの文字
列をかえすことです。さらに、同じデータを入力したら、必ず同じ文字列を返すという条
件がつきます。厳密な説明はさておき、これがハッシュ関数の役割りです。git の場合と
くに、 ~sha1~ というハッシュ関数が使われています。


* github の使い方(を教えない)

** git と github の違い

操作の方法の前に git と github の違いについて

git はバージョン管理の仕組み（ツール）で、github はそれを使いやすくするためのサー
ビスです。とんかつと和幸の関係です。とんかつという食べ物をサービスとして提供する
和幸です。とんかつとは何か基本的なことがわかっていれば和幸に行っても基本的に大丈
夫なように、git がわかっていれば github の理解は早いですが、どこかで（例えば和幸）
で一度食べないと、とんかつの事をそもそもわからないのも似ています。github の他に
 +とんかつ屋は+ 色々あります:

- github.com
- gitlab.com
- sr.ht

でも今回は、特別 Microsoft に怨念があるわけでもないので、一番使われている github
を使います。

git はコマンドラインで使うのが一番使いやすいと酒井は *強く* 思っていますが、それ
をやると、時間がないのと、大分敷居が高くなるので、教えません!

(厳しい事を言っておいて、教えないという謎展開)

- この後すぐにやってみようという方は、[[https://pineapple.blog/how-to-use-sourcetree-for-version-control-abbdd91c95b1][金谷先生の記事]]がいいとおもう。

- Git の GUI として初心者が使いやすそうなのは [[https://www.sourcetreeapp.com/][Source tree]] らしいですが、酒井は使
  いません。

- この本が解りやすいかも？ [[https://www.amazon.co.jp/%E3%82%8F%E3%81%8B%E3%81%B0%E3%81%A1%E3%82%83%E3%82%93%E3%81%A8%E5%AD%A6%E3%81%B6-Git%E4%BD%BF%E3%81%84%E6%96%B9%E5%85%A5%E9%96%80%E3%80%88GitHub%E3%80%81Bitbucket%E3%80%81SourceTree%E3%80%89-%E6%B9%8A%E5%B7%9D-%E3%81%82%E3%81%84/dp/4863542178][『わかばちゃんと学ぶ git 使い方入門』]]

** とりあえず、学会の学術委員会の取り組みに参加できるようになる

大体の構造を理解したので、目的ありきで説明して、それ以降少しずつ取りこんでいった
ほうが良さそう。

*** github の アカウントがなければ早々につくる

*** ディスカッションペーパーレポジトリに行く

*** フォーク(Fork)する

*** 編集する

*** プルリ(Pull Request)する
